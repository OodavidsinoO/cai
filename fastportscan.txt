package main

import (
	"fmt"
	"net"
	"sync"
	"time"
)

func main() {
	target := "192.168.1.1"
	fmt.Printf("Starting ultra fast port scan on %s\n", target)
	
	var wg sync.WaitGroup
	
	// Define port ranges - common ports first for faster results
	commonPorts := []int{21, 22, 23, 25, 53, 80, 110, 111, 135, 139, 143, 443, 445, 993, 995, 1723, 3306, 3389, 5900, 8080}
	
	// Scan common ports first
	fmt.Println("Scanning common ports...")
	for _, port := range commonPorts {
		wg.Add(1)
		go func(p int) {
			defer wg.Done()
			scanPort(target, p)
		}(port)
	}
	
	// Then scan all ports from 1-65535
	fmt.Println("Starting full port scan...")
	for port := 1; port <= 65535; port++ {
		// Skip common ports as we already scanned them
		if contains(commonPorts, port) {
			continue
		}
		
		wg.Add(1)
		go func(p int) {
			defer wg.Done()
			scanPort(target, p)
		}(port)
		
		// Control concurrency to avoid overwhelming the system
		if port%500 == 0 {
			time.Sleep(10 * time.Millisecond)
		}
	}
	
	wg.Wait()
	fmt.Println("Port scan completed")
}

func scanPort(target string, port int) {
	address := fmt.Sprintf("%s:%d", target, port)
	conn, err := net.DialTimeout("tcp", address, 200*time.Millisecond)
	
	if err != nil {
		return
	}
	
	conn.Close()
	fmt.Printf("Port %d is open\n", port)
}

func contains(slice []int, val int) bool {
	for _, item := range slice {
		if item == val {
			return true
		}
	}
	return false
}
