package main

import (
	"fmt"
	"net"
	"sync"
	"time"
)

func main() {
	target := "192.168.1.1"
	// Scan all ports (1-65535)
	var wg sync.WaitGroup
	
	// Channel to collect open ports
	openPorts := make(chan int, 100)
	
	// Semaphore to limit concurrent goroutines
	semaphore := make(chan struct{}, 1000) // Adjust this number based on system capabilities
	
	// Start time for benchmarking
	startTime := time.Now()
	
	fmt.Printf("Starting ultra fast port scan on %s\n", target)
	
	// Scan all ports
	for port := 1; port <= 65535; port++ {
		wg.Add(1)
		semaphore <- struct{}{} // Acquire semaphore
		
		go func(p int) {
			defer wg.Done()
			defer func() { <-semaphore }() // Release semaphore
			
			address := fmt.Sprintf("%s:%d", target, p)
			conn, err := net.DialTimeout("tcp", address, 200*time.Millisecond)
			
			if err == nil {
				openPorts <- p
				conn.Close()
			}
		}(port)
	}
	
	// Close channel when all goroutines complete
	go func() {
		wg.Wait()
		close(openPorts)
	}()
	
	// Collect and display results
	var results []int
	for port := range openPorts {
		results = append(results, port)
	}
	
	// Print results
	fmt.Printf("\nScan completed in %s\n", time.Since(startTime))
	fmt.Printf("Open ports on %s: ", target)
	
	if len(results) == 0 {
		fmt.Println("None found")
	} else {
		for i, port := range results {
			if i > 0 {
				fmt.Print(", ")
			}
			fmt.Printf("%d", port)
		}
		fmt.Println()
	}
}
